{"version":3,"sources":["reddonkey/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","db","_","solving","cljs.core.assoc","reddonkey.db/initial-state","re_frame.core.reg_event_fx","p__21756","map__21757","cljs.core/--destructure-map","cljs.core.get","event","js/console","p__21758","map__21759","cljs.core.println","p__21760","vec__21761","cljs.core.nth","vec__21764","n","d","state","new-state","reddonkey.geom/apply-move","reddonkey.geom/next-moves","p__21767","map__21768","start-state","start-node","queue","tailrecursion.priority_map.priority_map","reached","p__21769","p__21770","map__21771","vec__21772","p__21775","p__21776","map__21777","vec__21778","sol","events","cljs.core/vec","reddonkey.geom/moves-to-events","fx","cljs.core.mapv","p__21781","vec__21782","t","p__21785","map__21786","cljs.core/seq","reddonkey.geom/final?","cljs.core/peek","next-result","reddonkey.geom/expand","cljs.core/pop","new-reached","new-queue","re-frame.core/dispatch","moves","reddonkey.geom/moves-from-list","cljs.core/reverse","cljs.core.map","reddonkey.geom/node-to-list","reddonkey.db/default-db","p__21787","vec__21788","value"],"sourcesContent":["(ns reddonkey.events\n  (:require\n   [re-frame.core :as re-frame]\n   [re-pressed.core :as rp]\n   [tailrecursion.priority-map :as pm]\n   [reddonkey.geom :as geom]\n   [reddonkey.db :as db]\n   ))\n\n(re-frame/reg-event-db\n  ::init\n  (fn [db _]\n      (let [solving (:solving db)]\n        (if solving db\n          (assoc db :state db/initial-state) \n          )\n        )\n    )\n  )\n\n\n(re-frame/reg-event-fx\n  ::solve\n  (fn [{:keys [db]} event]\n    (.log js/console event)\n    {:db db\n      :fx [ [:dispatch-later {:ms 100 :dispatch [::do-solve 0]}] ]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::do-solve\n  (fn [{:keys [db]} _]\n    (println \"do-solve\")\n    (let [solving (:solving db)]\n      (println solving)\n      (if solving \n        {:db db}\n        {:db (assoc db :solving true)\n         :fx [ [:dispatch-later {:ms 100 :dispatch [::bfs 0]}] ]\n         }\n        )\n      )\n    )\n  )\n\n(re-frame/reg-event-db\n  ::move\n  (fn [db [_ [n d]]]\n      (let \n        [state (:state db)\n         solving (:solving db)\n         new-state (geom/apply-move state [n d])\n         ]\n        (if solving db \n        (assoc (assoc db :state new-state) :next-moves (geom/next-moves new-state))\n        ))\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::bfs\n  (fn [{:keys [db]} _]\n    (let [start-state (:state db)\n        start-node {:state start-state :length 0 :prev nil}\n        queue (pm/priority-map start-node 0)\n        reached {start-state start-node}\n        ]\n        {:db (assoc db :solving true)\n         :fx [[:dispatch-later {:ms 100 :dispatch [::bfs-step reached queue]}]]\n         }\n      )\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::solved\n  (fn [{:keys [db]} [_ _]]\n    {:db (assoc db :solving false)}\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::play-solution\n  (fn [{:keys [db]} [_ sol]]\n    (let [\n           events (vec (geom/moves-to-events sol))\n           fx (mapv (fn [[n d t]] [:dispatch-later {:ms t :dispatch [::move [n d]]} ]) events ) \n          ]\n        {:db db \n          :fx fx\n         }\n      )\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::bfs-step\n  (fn [{:keys [db event]} _]\n    (println \"bfs-step\")\n    (let [reached (nth event 1)\n          queue (nth event 2)]\n     (if (and (seq queue) (not (geom/final? (nth (peek queue) 0))))\n        (let [n (nth (peek queue) 0)\n              next-result (geom/expand n reached (pop queue))\n              new-reached (:reached next-result)\n              new-queue (:queue next-result)]\n          ;;(println (:length n))\n          (re-frame/dispatch [::bfs-step new-reached new-queue])\n          )\n         (let [moves (geom/moves-from-list (reverse (map :blocks (geom/node-to-list (nth (peek queue) 0)))))]\n           (re-frame/dispatch [::solved 1])\n           (re-frame/dispatch [::play-solution (vec moves)])\n           )\n        )\n      )\n    )\n  )\n\n\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n(re-frame/reg-event-db\n ::set-re-pressed-example\n (fn [db [_ value]]\n   (assoc db :re-pressed-example value)))\n"]}