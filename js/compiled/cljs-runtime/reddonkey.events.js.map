{"version":3,"sources":["reddonkey/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","db","_","solving","cljs.core.assoc","reddonkey.db/initial-state","re_frame.core.reg_event_fx","p__12835","map__12836","cljs.core/--destructure-map","cljs.core.get","event","js/console","p__12837","map__12838","p__12839","vec__12840","cljs.core.nth","vec__12843","n","d","state","new-state","reddonkey.geom/apply-move","reddonkey.geom/next-moves","p__12848","map__12849","start-state","start-node","queue","tailrecursion.priority_map.priority_map","reached","p__12851","p__12852","map__12853","vec__12854","p__12857","p__12858","map__12859","vec__12860","sol","events","cljs.core/vec","reddonkey.geom/moves-to-events","fx","cljs.core.mapv","p__12863","vec__12864","t","p__12867","map__12868","cljs.core/seq","reddonkey.geom/final?","cljs.core/peek","next-result","reddonkey.geom/expand","cljs.core/pop","new-reached","new-queue","re-frame.core/dispatch","moves","reddonkey.geom/moves-from-list","cljs.core/reverse","cljs.core.map","reddonkey.geom/node-to-list","reddonkey.db/default-db","p__12870","vec__12871","value"],"sourcesContent":["(ns reddonkey.events\n  (:require\n   [re-frame.core :as re-frame]\n   [re-pressed.core :as rp]\n   [tailrecursion.priority-map :as pm]\n   [reddonkey.geom :as geom]\n   [reddonkey.db :as db]\n   ))\n\n(re-frame/reg-event-db\n  ::init\n  (fn [db _]\n      (let [solving (:solving db)]\n        (if solving db\n          (assoc db :state db/initial-state) \n          )\n        )\n    )\n  )\n\n\n(re-frame/reg-event-fx\n  ::solve\n  (fn [{:keys [db]} event]\n    (.log js/console event)\n    {:db db\n      :fx [ [:dispatch-later {:ms 100 :dispatch [::do-solve 0]}] ]\n     }\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::do-solve\n  (fn [{:keys [db]} _]\n    (let [solving (:solving db)]\n      (if solving \n        {:db db}\n        {:db (assoc db :solving true)\n         :fx [ [:dispatch-later {:ms 100 :dispatch [::bfs 0]}] ]\n         }\n        )\n      )\n    )\n  )\n\n(re-frame/reg-event-db\n  ::move\n  (fn [db [_ [n d]]]\n      (let \n        [state (:state db)\n         solving (:solving db)\n         new-state (geom/apply-move state [n d])\n         ]\n        (if solving db \n        (assoc (assoc db :state new-state) :next-moves (geom/next-moves new-state))\n        ))\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::bfs\n  (fn [{:keys [db]} _]\n    (let [start-state (:state db)\n        start-node {:state start-state :length 0 :prev nil}\n        queue (pm/priority-map start-node 0)\n        reached {start-state start-node}\n        ]\n        {:db (assoc db :solving true)\n         :fx [[:dispatch-later {:ms 100 :dispatch [::bfs-step reached queue]}]]\n         }\n      )\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::solved\n  (fn [{:keys [db]} [_ _]]\n    {:db (assoc db :solving false)}\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::play-solution\n  (fn [{:keys [db]} [_ sol]]\n    (let [\n           events (vec (geom/moves-to-events sol))\n           fx (mapv (fn [[n d t]] [:dispatch-later {:ms t :dispatch [::move [n d]]} ]) events ) \n          ]\n        {:db db \n          :fx fx\n         }\n      )\n    )\n  )\n\n(re-frame/reg-event-fx\n  ::bfs-step\n  (fn [{:keys [db event]} _]\n    (let [reached (nth event 1)\n          queue (nth event 2)]\n     (if (and (seq queue) (not (geom/final? (nth (peek queue) 0))))\n        (let [n (nth (peek queue) 0)\n              next-result (geom/expand n reached (pop queue))\n              new-reached (:reached next-result)\n              new-queue (:queue next-result)]\n          (re-frame/dispatch [::bfs-step new-reached new-queue])\n          )\n         (let [moves (geom/moves-from-list (reverse (map :blocks (geom/node-to-list (nth (peek queue) 0)))))]\n           (re-frame/dispatch [::solved 1])\n           (re-frame/dispatch [::play-solution (vec moves)])\n           )\n        )\n      )\n    )\n  )\n\n\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn [_ _]\n   db/default-db))\n\n(re-frame/reg-event-db\n ::set-re-pressed-example\n (fn [db [_ value]]\n   (assoc db :re-pressed-example value)))\n"]}