{"version":3,"sources":["jtk_dvlp/re_frame/dragndrop.cljs"],"mappings":"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","names":["jtk-dvlp.re-frame.dragndrop/!clj->transit","cljs.core.atom","jtk-dvlp.re-frame.dragndrop/set-fn-clj->transit!","cljs.core.partial","cljs.core/reset!","jtk-dvlp.re-frame.dragndrop/clj->transit","clj","f","or__5045__auto__","cljs.core/deref","jtk-dvlp.transit/clj->transit","jtk-dvlp.re-frame.dragndrop/!transit->clj","jtk-dvlp.re-frame.dragndrop/set-fn-transit->clj!","jtk-dvlp.re-frame.dragndrop/transit->clj","transit","jtk-dvlp.transit/transit->clj","jtk-dvlp.re-frame.dragndrop/ensure-coll","x","cljs.core/coll?","cljs.core/PersistentVector","jtk-dvlp.re-frame.dragndrop/normalize-type","type","edn?","G__13040","jtk-dvlp.re-frame.dragndrop/normalize-types","types","cljs.core.map","cljs.core.juxt","cljs.core/identity","cljs.core.into","p__13041","map__13042","cljs.core/--destructure-map","cljs.core.get","jtk-dvlp.re-frame.dragndrop/set-transfer-data!","js-event","data","transfer","G__13043","cljs.core.js_invoke","jtk-dvlp.re-frame.dragndrop/get-transfer-items","cljs.core.array_seq","cljs.core.filter","p1__13044#","cljs.core.comp","cljs.core/seq","jtk-dvlp.re-frame.dragndrop/get-transfer-data","iter__5523__auto__","s__13046","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__13048","cljs.core/chunk-buffer","i__13047","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__13045","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","item","kind","cljs.core.get_in","G__13049","js/Error","G__13051","G__13050","G__13052","cljs.core/js-invoke","jtk-dvlp.re-frame.dragndrop/can-handle-transfer-data?","jtk-dvlp.re-frame.dragndrop/prevent-drop!","jtk-dvlp.re-frame.dragndrop/prevent-default!","p__13053","vec__13054","seq__13055","first__13056","cljs.core/next","jtk-dvlp.re-frame.dragndrop/normalize-element","tag","attrs-or-content","more-content","element","vec__13057","cljs.core.nth","attrs","content","cljs.core/map?","jtk-dvlp.re-frame.dragndrop/normalize-class","class","cljs.core/vector?","p__13061","map__13062","jtk-dvlp.re-frame.dragndrop/draggable","on-drag","!dragging?","reagent.core.atom","p__13063","map__13064","vec__13065","seq__13066","first__13067","map__13068","G__13069","cljs.core.conj","p1__13060#","re-frame.core/dispatch","drag-attrs","_js-event","cljs.core.merge","p__13071","map__13072","jtk-dvlp.re-frame.dragndrop/dropzone","on-drop","!over?","p__13073","map__13074","vec__13075","seq__13076","first__13077","map__13078","G__13079","p1__13070#","drop-attrs","cljs.core/chunk-first"],"sourcesContent":["(ns jtk-dvlp.re-frame.dragndrop\r\n  (:require\r\n   [reagent.core :as r]\r\n   [re-frame.core :as rf]\r\n   [jtk-dvlp.transit :as transit]))\r\n\r\n\r\n(def ^:private !clj->transit (atom nil))\r\n(def set-fn-clj->transit!\r\n  (partial reset! !clj->transit))\r\n\r\n(defn- clj->transit\r\n  [clj]\r\n  (let [f (or @!clj->transit transit/clj->transit)]\r\n    (f clj)))\r\n\r\n(def ^:private !transit->clj (atom nil))\r\n(def set-fn-transit->clj!\r\n  (partial reset! !transit->clj))\r\n\r\n(defn- transit->clj\r\n  [transit]\r\n  (let [f (or @!transit->clj transit/transit->clj)]\r\n    (f transit)))\r\n\r\n(defn- ensure-coll\r\n  [x]\r\n  (if (coll? x)\r\n    x\r\n    (vector x)))\r\n\r\n(defn- normalize-type\r\n  [type]\r\n  (let [edn? (not (string? type))]\r\n    {:edn? edn?\r\n     :string (cond-> type edn? (clj->transit))\r\n     :raw type}))\r\n\r\n(defn- normalize-types\r\n  [types]\r\n  (->> types\r\n       (ensure-coll)\r\n       (map normalize-type)\r\n       (map (juxt :string identity))\r\n       (into {})))\r\n\r\n(defn- set-transfer-data!\r\n  [js-event {:keys [edn?] :as type} data]\r\n  (let [transfer\r\n        (aget js-event \"dataTransfer\")\r\n\r\n        data\r\n        (cond-> data\r\n          edn?\r\n          (clj->transit))]\r\n\r\n    (js-invoke transfer \"setData\" (:string type) data)))\r\n\r\n(defn- get-transfer-items\r\n  [js-event types]\r\n  (->> (aget js-event \"dataTransfer\" \"items\")\r\n       (array-seq)\r\n       (filter (comp types #(aget % \"type\")))\r\n       (seq)))\r\n\r\n(defn- get-transfer-data\r\n  [js-event types]\r\n  (for [item (get-transfer-items js-event types)\r\n        :let [kind (aget item \"kind\")\r\n              type (aget item \"type\")\r\n              edn? (get-in types [type :edn?])]]\r\n    (case kind\r\n      \"string\"\r\n      (let [transfer (aget js-event \"dataTransfer\")]\r\n        (cond-> (js-invoke transfer \"getData\" type)\r\n          edn?\r\n          (transit->clj)))\r\n\r\n      \"file\"\r\n      (js-invoke item \"getAsFile\"))))\r\n\r\n(defn- can-handle-transfer-data?\r\n  [js-event types]\r\n  (->> types\r\n       (get-transfer-items js-event)\r\n       (some?)))\r\n\r\n(defn- prevent-drop!\r\n  [js-event]\r\n  (aset js-event \"dataTransfer\" \"dropEffect\" \"none\"))\r\n\r\n(defn- prevent-default!\r\n  [js-event]\r\n  (js-invoke js-event \"preventDefault\"))\r\n\r\n(defn- normalize-element\r\n  [[tag attrs-or-content & more-content :as element]]\r\n  (let [[attrs content]\r\n        (if (map? attrs-or-content)\r\n          [attrs-or-content more-content]\r\n          [{} (into [attrs-or-content] more-content)])]\r\n\r\n    (into [tag attrs] content)))\r\n\r\n(defn- normalize-class\r\n  [class]\r\n  (cond\r\n    (vector? class)\r\n    class\r\n\r\n    (nil? class)\r\n    []\r\n\r\n    :else [class]))\r\n\r\n(defn draggable\r\n  \"Modifies `element` to be draggable.\r\n\r\n  - `type` defines the type of data to transfer via drag & drop. Supports string (e.g. mimetype for exchange of files), keyword and other values working with `jtk-dvlp.transit/clj->transit`. Need to match dropzone`s type to be droppable.\r\n  - `data` defines the data to transfer via drag & drop. Supports strings and any value working with `jtk-dvlp.transit/clj->transit`. Auto converts non string values to transit-json and vice versa, when `type` is not a string assuming non mimetype value but clojure structures.\r\n  - `on-drag` (optional) defines a re-frame event vector or function to dispatch / call with the `data` on start dragging\r\n\r\n  See `dropzone`.\"\r\n  [{:keys [type data on-drag] :as attrs} element]\r\n  (let [!dragging? (r/atom false)]\r\n    (fn [{:keys [type data on-drag]} element]\r\n      (let [[tag {:keys [class] :as attrs} & content]\r\n            (normalize-element element)\r\n\r\n            class\r\n            (cond-> (normalize-class class)\r\n              :always\r\n              (conj :draggable)\r\n\r\n              @!dragging?\r\n              (conj :draggable--dragging))\r\n\r\n            type\r\n            (normalize-type type)\r\n\r\n            on-drag\r\n            (if (vector? on-drag)\r\n              #(rf/dispatch (conj on-drag %))\r\n              on-drag)\r\n\r\n            drag-attrs\r\n            {:class class\r\n             :draggable true\r\n\r\n             :on-drag-start\r\n             (fn [js-event]\r\n               (set-transfer-data! js-event type data)\r\n               (reset! !dragging? true)\r\n               (when on-drag\r\n                 (on-drag data)))\r\n\r\n             :on-drag-end\r\n             (fn [_js-event]\r\n               (reset! !dragging? false))}]\r\n\r\n        (into [tag (merge attrs drag-attrs)] content)))))\r\n\r\n(defn dropzone\r\n  \"Modifies `element` to function as dropzone for draggables.\r\n\r\n  - `types` defines the type or collection of types of data to be allowed dropping over this element / zone. Supports string, keyword and other values working with `jtk-dvlp.transit/clj->transit`. Need to match draggable\u00b4s types to allow dropping.\r\n  - `on-drop` defines a re-frame event vector or function to dispatch / call with a vector of the dropped data on dopping a draggable element.\r\n\r\n  See `draggable`.\"\r\n  [{:keys [types on-drop] :as attrs} element]\r\n  (let [!over? (r/atom false)]\r\n    (fn [{:keys [types on-drop]} element]\r\n      (let [[tag {:keys [class] :as attrs} & content]\r\n            (normalize-element element)\r\n\r\n            class\r\n            (cond-> (normalize-class class)\r\n              :always\r\n              (conj :dropzone)\r\n\r\n              @!over?\r\n              (conj :dropzone--over))\r\n\r\n            types\r\n            (normalize-types types)\r\n\r\n            on-drop\r\n            (if (vector? on-drop)\r\n              #(rf/dispatch (conj on-drop %))\r\n              on-drop)\r\n\r\n            drop-attrs\r\n            {:class class\r\n\r\n             :on-drag-enter\r\n             (fn [js-event]\r\n               (when (can-handle-transfer-data? js-event types)\r\n                 (reset! !over? true)))\r\n\r\n             :on-drag-over\r\n             (fn [js-event]\r\n               (if (can-handle-transfer-data? js-event types)\r\n                 (prevent-default! js-event)\r\n                 (prevent-drop! js-event)))\r\n\r\n             :on-drop\r\n             (fn [js-event]\r\n               (when-let [data (get-transfer-data js-event types)]\r\n                 (prevent-default! js-event)\r\n                 (on-drop data)\r\n                 (reset! !over? false)))\r\n\r\n             :on-drag-leave\r\n             (fn [js-event]\r\n               (reset! !over? false))}]\r\n\r\n        (into [tag (merge attrs drop-attrs)] content)))))\r\n"],"x_google_ignoreList":[0]}